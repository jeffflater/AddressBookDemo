@{
    Layout = null;
}
<script>

    var oTableRelationshipView;

    head.ready(function() {
        $(function() {

            var peopleController = new PeopleController();
            peopleController.GetAll(function(data) {
                var cbPerson1 = $("#cbPerson1");
                for (var i = 0; i < data.length; i++) {
                    cbPerson1.append(new Option(data[i].FullName + ' - ' + FormatPersonType(data[i].PersonType), data[i].Id + '|' + data[i].PersonType));
                }
            });

            oTableRelationshipView = $('#relationshipView');

        });
    });

    function SaveRelationship() {

        var person = $("#cbPerson1").val();
        var childId = person.split('|')[0];
        var childPersonType = person.split('|')[1];

        var relationshipItem = new RelationshipItem(_personId,
            _personTypeId,
            childId,
            childPersonType);
        var relationshipController = new RelationshipController();
        relationshipController.Post(relationshipItem, function(data) {
            FetchPersonRelationshpView();
        });
    }

    function RenderPersonView(id, personType) {

        _personId = id;
        _personTypeId = personType;

        switch (_personTypeId) {
        case 1:
            var customerController = new CustomerController();
            customerController.Get(_personId, function(data) {
                RenderPersonDetailView(data, _personTypeId);
            });
            break;
        case 2:
            var employeeController = new EmployeeController();
            employeeController.Get(_personId, function(data) {
                RenderPersonDetailView(data, _personTypeId);
            });
            break;
        case 3:
            var managerController = new ManagerController();
            managerController.Get(_personId, function(data) {
                RenderPersonDetailView(data, _personTypeId);
            });
            break;
        case 4:
            var salesPersonController = new SalesPersonController();
            salesPersonController.Get(_personId, function(data) {
                RenderPersonDetailView(data, _personTypeId);
            });
            break;
        }

        FetchPersonRelationshpView();
    }

    function RenderPersonDetailView(data, personType) {
        RenderMessage(data.FullName + " has been selected.");

        $('#tbPersonID').val(_personId);
        $('#tbPersonType').val(FormatPersonType(_personTypeId));

        $('#tbFirstName').val(data.FirstName);
        $('#tbLastName').val(data.LastName);
        $('#tbDateOfBirth').val(data.DateOfBirth);

        var details = '';
        switch (personType) {
        case 1:
            details += 'Gender: ' + data.Gender + "<br>";
            details += 'Age: ' + data.Age + "<br>";
            details += 'Race: ' + data.Race + "<br>";
            details += 'Education: ' + data.Education + "<br>";
            details += 'CreatedOn: ' + data.CreatedOn + "<br>";
            details += 'LastModifiedOn: ' + data.LastModifiedOn + "<br>";
            break;
        case 2:
            details += 'Department: ' + data.Department + "<br>";
            details += 'Branch: ' + data.Branch + "<br>";
            details += 'HireDate: ' + data.HireDate + "<br>";
            details += 'ApprovedOvertime: ' + data.ApprovedOvertime + "<br>";
            details += 'CreatedOn: ' + data.CreatedOn + "<br>";
            details += 'LastModifiedOn: ' + data.LastModifiedOn + "<br>";
            break;
        case 3:
            details += 'Department: ' + data.Department + "<br>";
            details += 'Branch: ' + data.Branch + "<br>";
            details += 'HireDate: ' + data.HireDate + "<br>";
            details += 'SpendingLimit: ' + data.SpendingLimit + "<br>";
            details += 'CreatedOn: ' + data.CreatedOn + "<br>";
            details += 'LastModifiedOn: ' + data.LastModifiedOn + "<br>";
            break;
        case 4:
            details += 'Department: ' + data.Department + "<br>";
            details += 'Branch: ' + data.Branch + "<br>";
            details += 'HireDate: ' + data.HireDate + "<br>";
            details += 'WeeklySalesGoal: ' + data.WeeklySalesGoal + "<br>";
            details += 'CreatedOn: ' + data.CreatedOn + "<br>";
            details += 'LastModifiedOn: ' + data.LastModifiedOn + "<br>";
            break;
        }

        $('#additionalDetails').html(details);
    }

    function FetchPersonRelationshpView() {
        var relationshipController = new RelationshipController();
        relationshipController.GetAll(_personId, _personTypeId, function(data) {
            RenderPersonRelationshipView(data, _personTypeId);
        });
    }

    function RenderPersonRelationshipView(data, personType) {

        oTableRelationshipView.dataTable().fnDestroy();

        if (data != '') {

            oTableRelationshipView = oTableRelationshipView.dataTable({
                "aaData": data,
                "bProcessing": false,
                "bServerSide": false,
                "bAutoWidth": true,
                "bFilter": true,
                "bInfo": true,
                "bSearchable": true,
                "bPaginate": true,
                "bSortCellsTop": true,
                "bRetrieve": false,
                "bDestroy": true,
                "oLanguage": {
                    "sEmptyTable": "No data available."
                },
                "aoColumns": [
                    { "mData": "Id" },
                    { "mData": "FullName" },
                    { "mData": "PersonType" },
                    { "mData": "Distance" }
                ],
                "fnRowCallback": function(nRow, aData, iDisplayIndex) {
                    var personType = FormatPersonType(aData.PersonType);
                    $('td:eq(2)', nRow).html(personType);
                    return nRow;
                },
                "aoColumnDefs": [
                    { "sTitle": "ID", "aTargets": [0] },
                    { "sTitle": "Full Name", "aTargets": [1] },
                    { "sTitle": "Person Type", "aTargets": [2] }
                ]
            });

        }
    }

    function DeletePersonConfirm() {
        $('#deleteRelationshipModal').modal('show');
    }

    function DeletePerson() {

        switch (_personTypeId) {
        case 1:
            var customerController = new CustomerController();
            customerController.Delete(_personId, function(data) {
                DeletePersonResponse();
            });
            break;
        case 2:
            var employeeController = new EmployeeController();
            employeeController.Delete(_personId, function(data) {
                DeletePersonResponse();
            });
            break;
        case 3:
            var managerController = new ManagerController();
            managerController.Delete(_personId, function(data) {
                DeletePersonResponse();
            });
            break;
        case 4:
            var salesPersonController = new SalesPersonController();
            salesPersonController.Delete(_personId, function(data) {
                DeletePersonResponse();
            });
            break;
        }


    }

    function DeletePersonResponse() {
        RenderMessage('Person has been deleted.');
        $('#deleteRelationshipModal').modal('hide');
        $('#tbPersonID').val('');
        $('#tbPersonType').val('');
        $('#tbFirstName').val('');
        $('#tbLastName').val('');
        $('#tbDateOfBirth').val('');
        $('#additionalDetails').html('');
        $('#cbPerson1')
            .find('option')
            .remove()
            .end();
        oTableRelationshipView.dataTable().fnDestroy();
        RenderPeopleView();
    }

    function EditPersonPopUpView() {
        RenderPersonPopUpView('edit');
        $('#personModal').modal('show');
        return false;
    }
    

</script>

<form role="form">
    <div class="form-group">
        <label for="tbPersonID">Person ID</label>
        <input type="text" class="form-control" id="tbPersonID" placeholder="First Name" class="input-sm">
    </div>
    <div class="form-group">
        <label for="tbPersonType">Person Type</label>
        <input type="text" class="form-control" id="tbPersonType" placeholder="First Name" class="input-sm">
    </div>
    <div class="form-group">
        <label for="tbFirstName">First Name</label>
        <input type="text" class="form-control" id="tbFirstName" placeholder="First Name" class="input-sm">
    </div>
    <div class="form-group">
        <label for="tbLastName">Last Name</label>
        <input type="text" class="form-control" id="tbLastName" placeholder="Last Name" class="input-sm">
    </div>
    <div class="form-group">
        <label for="tbDateOfBirth">Date of Birth</label>
        <input type="date" class="form-control" id="tbDateOfBirth" placeholder="Last Name" class="input-sm">
    </div>
    <p class="lead">Additional Information:</p>
    <div class="alert alert-warning" id="additionalDetails"></div>
</form>

<div class="form-group">
    <label>Add New Relationship</label><br/>
    <label for="cbPerson1">Person</label>
    <select class="form-control" id="cbPerson1" class="input-sm">
    </select>
    <button type="button" class="btn btn-default" data-dismiss="modal" onclick="SaveRelationship();">Add</button>
</div>

<table id="relationshipView" class="table table-striped table-bordered table-hover table-condensed">
	<thead>
		<tr>
            <th>Id</th>
            <th>FullName</th>
            <th>PersonType</th>
            <th>Distance</th>
		</tr>
	</thead>
	<tbody>
	</tbody>
</table>

<hr/>
<input id="btnDelete" type="button" value="Delete" class="btn btn-default" onclick="DeletePersonConfirm();" />
<a data-toggle="modal" href="#personModal" class="btn btn-default pull-right" onclick="EditPersonPopUpView();">Edit</a>

<div class="modal fade" id="deleteRelationshipModal" tabindex="-1" role="dialog" aria-labelledby="deleteRelationshipModal" aria-hidden="true">
<div class="modal-dialog">
    <div class="modal-content">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h4 class="modal-title">Delete this Person!</h4>
    </div>
    <div class="modal-body">
      Are you sure you want to delete this person?
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" onclick="DeletePerson();">Save changes</button>
    </div>
    </div>
</div>
</div>
